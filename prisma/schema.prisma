// Brooklyn Creative Hub Prisma Schema
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/brooklyn-creative-hub/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ARTIST
  CLIENT
}

enum GigCategory {
  MURALIST
  GRAPHIC_DESIGNER
  PHOTOGRAPHER
  WEB_DESIGNER
  ILLUSTRATOR
  VIDEO_EDITOR
  OTHER
}

enum GigStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionTier {
  FREE
  PRO
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

// Core User Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile            UserProfile?
  artistProfile      ArtistProfile?
  clientProfile      ClientProfile?
  sentMessages       Message[]        @relation("MessageSender")
  receivedMessages   Message[]        @relation("MessageReceiver")
  payments           Payment[]
  subscription       Subscription?
  reviewsGiven       Review[]         @relation("ReviewGiver")
  reviewsReceived    Review[]         @relation("ReviewReceiver")

  // NextAuth fields
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model UserProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  firstName   String?
  lastName    String?
  phone       String?
  avatar      String?
  bio         String?
  website     String?
  socialLinks Json?   // {instagram, twitter, linkedin, etc.}

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model ArtistProfile {
  id                 String             @id @default(cuid())
  userId             String             @unique
  businessName       String?
  skills             String[]           // Array of skill tags
  experienceYears    Int?
  hourlyRate         Decimal?           @db.Decimal(10, 2)
  availability       String?            // "full-time", "part-time", "weekends"
  portfolioTitle     String?
  portfolioDescription String?
  verificationStatus VerificationStatus @default(UNVERIFIED)
  neighborhoodId     String?
  location           String?            // Specific address or area
  latitude           Float?
  longitude          Float?
  isOpenToWork       Boolean            @default(true)
  completedProjects  Int                @default(0)
  averageRating      Decimal?           @db.Decimal(3, 2)

  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  neighborhood  BrooklynNeighborhood? @relation(fields: [neighborhoodId], references: [id])
  portfolios    Portfolio[]
  gigApplications GigApplication[]
  artistProjects ProjectArtist[]

  @@map("artist_profiles")
}

model ClientProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  companyName  String?
  companySize  String? // "1-10", "11-50", "51-200", "200+"
  industry     String?
  description  String?
  website      String?
  neighborhoodId String?
  location     String?
  latitude     Float?
  longitude    Float?

  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  neighborhood BrooklynNeighborhood? @relation(fields: [neighborhoodId], references: [id])
  postedGigs   Gig[]
  clientProjects ProjectClient[]

  @@map("client_profiles")
}

// Portfolio Models
model Portfolio {
  id          String @id @default(cuid())
  artistId    String
  title       String
  description String?
  isPublic    Boolean @default(true)
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  artist ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)
  items  PortfolioItem[]

  @@map("portfolios")
}

model PortfolioItem {
  id          String   @id @default(cuid())
  portfolioId String
  title       String
  description String?
  imageUrl    String
  category    GigCategory?
  tags        String[] // Array of tags
  order       Int      @default(0)
  createdAt   DateTime @default(now())

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

// Gig and Project Models
model Gig {
  id             String      @id @default(cuid())
  clientId       String
  title          String
  description    String
  category       GigCategory
  budget         Decimal     @db.Decimal(10, 2)
  budgetType     String      // "fixed", "hourly"
  timeline       String?     // "1 week", "2-4 weeks", etc.
  requirements   String[]    // Array of requirements
  skills         String[]    // Array of required skills
  location       String?
  isRemote       Boolean     @default(false)
  neighborhoodId String?
  status         GigStatus   @default(OPEN)
  featured       Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deadline       DateTime?

  client       ClientProfile         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  neighborhood BrooklynNeighborhood? @relation(fields: [neighborhoodId], references: [id])
  applications GigApplication[]
  project      Project?

  @@map("gigs")
}

model GigApplication {
  id          String            @id @default(cuid())
  gigId       String
  artistId    String
  coverLetter String?
  proposedRate Decimal?         @db.Decimal(10, 2)
  timeline    String?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  gig    Gig           @relation(fields: [gigId], references: [id], onDelete: Cascade)
  artist ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([gigId, artistId])
  @@map("gig_applications")
}

model Project {
  id          String        @id @default(cuid())
  gigId       String?       @unique
  title       String
  description String?
  budget      Decimal       @db.Decimal(10, 2)
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime      @default(now())
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  gig     Gig?            @relation(fields: [gigId], references: [id])
  artists ProjectArtist[]
  clients ProjectClient[]
  contract Contract?
  messages Message[]
  reviews  Review[]
  payments Payment[]

  @@map("projects")
}

model ProjectArtist {
  id        String @id @default(cuid())
  projectId String
  artistId  String

  project Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  artist  ArtistProfile @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([projectId, artistId])
  @@map("project_artists")
}

model ProjectClient {
  id        String @id @default(cuid())
  projectId String
  clientId  String

  project Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  client  ClientProfile @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([projectId, clientId])
  @@map("project_clients")
}

// Contract and Payment Models
model Contract {
  id           String   @id @default(cuid())
  projectId    String   @unique
  terms        String
  milestones   Json?    // Array of milestone objects
  totalAmount  Decimal  @db.Decimal(10, 2)
  signed       Boolean  @default(false)
  signedDate   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  projectId       String?
  flowgladPaymentId String?     // FlowGlad payment ID
  amount          Decimal       @db.Decimal(10, 2)
  fee             Decimal       @db.Decimal(10, 2) @default(0)
  netAmount       Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  description     String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id])

  @@map("payments")
}

// Communication Models
model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  projectId  String?
  content    String
  attachments Json?   // Array of file URLs
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  project  Project? @relation(fields: [projectId], references: [id])

  @@map("messages")
}

// Review System
model Review {
  id         String  @id @default(cuid())
  projectId  String
  giverId    String
  receiverId String
  rating     Int     // 1-5
  comment    String?
  createdAt  DateTime @default(now())

  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  giver    User    @relation("ReviewGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiver User    @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([projectId, giverId, receiverId])
  @@map("reviews")
}

// Subscription and Billing
model Subscription {
  id                  String           @id @default(cuid())
  userId              String           @unique
  tier                SubscriptionTier @default(FREE)
  flowgladCustomerId  String?          // FlowGlad customer ID
  flowgladSubscriptionId String?       // FlowGlad subscription ID
  currentPeriodStart  DateTime?
  currentPeriodEnd    DateTime?
  active              Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Location Data
model BrooklynNeighborhood {
  id        String @id @default(cuid())
  name      String @unique
  slug      String @unique
  latitude  Float
  longitude Float

  artists ArtistProfile[]
  clients ClientProfile[]
  gigs    Gig[]

  @@map("brooklyn_neighborhoods")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
